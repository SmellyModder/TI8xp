package net.smelly.tieightxp;

import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A registry class for all (as far as I know) instructions used by the TI83/TI84/TI84+/TI84s programs.
 * <p><b>It's possible some of these instructions are incorrect, use them at your own peril!</b></p>
 *
 * @author SmellyModder (Luke Tonon)
 */
@SuppressWarnings("unused")
public final class TIInstructions {
	private static final Map<List<Integer>, TIInstruction> CODE_TO_INSTRUCTION = new HashMap<>();
	private static final Map<String, TIInstruction> NAME_TO_INSTRUCTION = new HashMap<>();
	public static final TIInstruction NULL = instruction("&null", 0);
	public static final TIInstruction DMS = instruction(">DMS", 1);
	public static final TIInstruction DEC = instruction(">DEC", 2);
	public static final TIInstruction FRAC = instruction(">FRAC", 3);
	public static final TIInstruction ASSIGN = instruction("->", 4);
	public static final TIInstruction Boxplot = instruction("Boxplot", 5);
	public static final TIInstruction LEFT_BRACKET = instruction("[", 6);
	public static final TIInstruction RIGHT_BRACKET = instruction("]", 7);
	public static final TIInstruction LEFT_CURLY = instruction("{", 8);
	public static final TIInstruction RIGHT_CURLY = instruction("}", 9);
	public static final TIInstruction rad = instruction("&rad", 10);
	public static final TIInstruction deg = instruction("&deg", 11);
	public static final TIInstruction INVERSE = instruction("&^-1", 12);
	public static final TIInstruction SQUARED = instruction("&^2", 13);
	public static final TIInstruction transpose = instruction("&transpose", 14);
	public static final TIInstruction CUBED = instruction("&^3", 15);
	public static final TIInstruction LEFT_PARENTHESES = instruction("(", 16);
	public static final TIInstruction RIGHT_PARENTHESES = instruction(")", 17);
	public static final TIInstruction round_func = instruction("round(", 18);
	public static final TIInstruction pxlTest_func = instruction("pxl-Test(", 19);
	public static final TIInstruction augment_func = instruction("augment(", 20);
	public static final TIInstruction rowSwap_func = instruction("rowSwap(", 21);
	public static final TIInstruction ADD_ROW = instruction("row+(", 22);
	public static final TIInstruction MUL_ROW = instruction("*row(", 23);
	public static final TIInstruction MUL_ADD_ROW = instruction("*row+(", 24);
	public static final TIInstruction max_func = instruction("max(", 25);
	public static final TIInstruction min_func = instruction("min(", 26);
	public static final TIInstruction median_func = instruction("median(", 31);
	public static final TIInstruction randM_func = instruction("randM(", 32);
	public static final TIInstruction mean_func = instruction("mean(", 33);
	public static final TIInstruction solve_func = instruction("solve(", 34);
	public static final TIInstruction seq_func = instruction("seq(", 35);
	public static final TIInstruction fnInt_func = instruction("fnInt(", 36);
	public static final TIInstruction nDeriv_func = instruction("nDeriv(", 37);
	public static final TIInstruction fMin_func = instruction("fMin(", 39);
	public static final TIInstruction fMax_func = instruction("fMax(", 40);
	public static final TIInstruction SPACE = instruction(" ", 41);
	public static final TIInstruction STRING = instruction("\"", 42);
	public static final TIInstruction COMMA = instruction(",", 43);
	public static final TIInstruction IMAGINARY = instruction("&i", 44);
	public static final TIInstruction FACTORIAL = instruction("!", 45);
	public static final TIInstruction zero = instruction("0", 48);
	public static final TIInstruction one = instruction("1", 49);
	public static final TIInstruction two = instruction("2", 50);
	public static final TIInstruction three = instruction("3", 51);
	public static final TIInstruction four = instruction("4", 52);
	public static final TIInstruction five = instruction("5", 53);
	public static final TIInstruction six = instruction("6", 54);
	public static final TIInstruction seven = instruction("7", 55);
	public static final TIInstruction eight = instruction("8", 56);
	public static final TIInstruction nine = instruction("9", 57);
	public static final TIInstruction PERIOD = instruction(".", 58);
	public static final TIInstruction E_POW = instruction("&E", 59);
	public static final TIInstruction or = instruction(" or ", 60);
	public static final TIInstruction xor = instruction(" xor ", 61);
	public static final TIInstruction NEW_LINE = instruction(":", 62);
	public static final TIInstruction NEXT_LINE_AND_CARRIAGE = instruction("\\r\\n", 63);
	public static final TIInstruction and = instruction(" and ", 64);
	public static final TIInstruction A = instruction("A", 65);
	public static final TIInstruction B = instruction("B", 66);
	public static final TIInstruction C = instruction("C", 67);
	public static final TIInstruction D = instruction("D", 68);
	public static final TIInstruction E = instruction("E", 69);
	public static final TIInstruction F = instruction("F", 70);
	public static final TIInstruction G = instruction("G", 71);
	public static final TIInstruction H = instruction("H", 72);
	public static final TIInstruction I = instruction("I", 73);
	public static final TIInstruction J = instruction("J", 74);
	public static final TIInstruction K = instruction("K", 75);
	public static final TIInstruction L = instruction("L", 76);
	public static final TIInstruction M = instruction("M", 77);
	public static final TIInstruction N = instruction("N", 78);
	public static final TIInstruction O = instruction("O", 79);
	public static final TIInstruction P = instruction("P", 80);
	public static final TIInstruction Q = instruction("Q", 81);
	public static final TIInstruction R = instruction("R", 82);
	public static final TIInstruction S = instruction("S", 83);
	public static final TIInstruction T = instruction("T", 84);
	public static final TIInstruction U = instruction("U", 85);
	public static final TIInstruction V = instruction("V", 86);
	public static final TIInstruction W = instruction("W", 87);
	public static final TIInstruction X = instruction("X", 88);
	public static final TIInstruction Y = instruction("Y", 89);
	public static final TIInstruction Z = instruction("Z", 90);
	public static final TIInstruction theta = instruction("&theta", 91);
	public static final TIInstruction BA = instruction("[A]", (byte) 92, (byte) 0);
	public static final TIInstruction BB = instruction("[B]", (byte) 92, (byte) 1);
	public static final TIInstruction BC = instruction("[C]", (byte) 92, (byte) 2);
	public static final TIInstruction BD = instruction("[D]", (byte) 92, (byte) 3);
	public static final TIInstruction BE = instruction("[E]", (byte) 92, (byte) 4);
	public static final TIInstruction BF = instruction("[F]", (byte) 92, (byte) 5);
	public static final TIInstruction BG = instruction("[G]", (byte) 92, (byte) 6);
	public static final TIInstruction BH = instruction("[H]", (byte) 92, (byte) 7);
	public static final TIInstruction BI = instruction("[I]", (byte) 92, (byte) 8);
	public static final TIInstruction BJ = instruction("[J]", (byte) 92, (byte) 9);
	public static final TIInstruction Lone = instruction("&L1", (byte) 93, (byte) 0);
	public static final TIInstruction Ltwo = instruction("&L2", (byte) 93, (byte) 1);
	public static final TIInstruction Lthree = instruction("&L3", (byte) 93, (byte) 2);
	public static final TIInstruction Lfour = instruction("&L4", (byte) 93, (byte) 3);
	public static final TIInstruction Lfive = instruction("&L5", (byte) 93, (byte) 4);
	public static final TIInstruction Lsix = instruction("&L6", (byte) 93, (byte) 5);
	public static final TIInstruction Yone = instruction("&Y1", (byte) 94, (byte) 16);
	public static final TIInstruction Ytwo = instruction("&Y2", (byte) 94, (byte) 17);
	public static final TIInstruction Ythree = instruction("&Y3", (byte) 94, (byte) 18);
	public static final TIInstruction Yfour = instruction("&Y4", (byte) 94, (byte) 19);
	public static final TIInstruction Yfive = instruction("&Y5", (byte) 94, (byte) 20);
	public static final TIInstruction Ysix = instruction("&Y6", (byte) 94, (byte) 21);
	public static final TIInstruction Yseven = instruction("&Y7", (byte) 94, (byte) 22);
	public static final TIInstruction Yeight = instruction("&Y8", (byte) 94, (byte) 23);
	public static final TIInstruction Ynine = instruction("&Y9", (byte) 94, (byte) 24);
	public static final TIInstruction Yzero = instruction("&Y0", (byte) 94, (byte) 25);
	public static final TIInstruction XoneT = instruction("&X1T", (byte) 94, (byte) 32);
	public static final TIInstruction YoneT = instruction("&Y1T", (byte) 94, (byte) 33);
	public static final TIInstruction XtwoT = instruction("&X2T", (byte) 94, (byte) 34);
	public static final TIInstruction YtwoT = instruction("&Y2T", (byte) 94, (byte) 35);
	public static final TIInstruction XthreeT = instruction("&X3T", (byte) 94, (byte) 36);
	public static final TIInstruction YthreeT = instruction("&Y3T", (byte) 94, (byte) 37);
	public static final TIInstruction XfourT = instruction("&X4T", (byte) 94, (byte) 38);
	public static final TIInstruction YfourT = instruction("&Y4T", (byte) 94, (byte) 39);
	public static final TIInstruction XfiveT = instruction("&X5T", (byte) 94, (byte) 40);
	public static final TIInstruction YfiveT = instruction("&Y5T", (byte) 94, (byte) 41);
	public static final TIInstruction XsixT = instruction("&X6T", (byte) 94, (byte) 42);
	public static final TIInstruction YsixT = instruction("&Y6T", (byte) 94, (byte) 43);
	public static final TIInstruction rone = instruction("&r1", (byte) 94, (byte) 64);
	public static final TIInstruction rtwo = instruction("&r2", (byte) 94, (byte) 65);
	public static final TIInstruction rthree = instruction("&r3", (byte) 94, (byte) 66);
	public static final TIInstruction rfour = instruction("&r4", (byte) 94, (byte) 67);
	public static final TIInstruction rfive = instruction("&r5", (byte) 94, (byte) 68);
	public static final TIInstruction rsix = instruction("&r6", (byte) 94, (byte) 69);
	public static final TIInstruction u = instruction("u", (byte) 94, (byte) 128);
	public static final TIInstruction v = instruction("v", (byte) 94, (byte) 129);
	public static final TIInstruction aw = instruction("&w", (byte) 94, (byte) 130);
	public static final TIInstruction prgm = instruction("prgm", 95);
	public static final TIInstruction Picone = instruction("Pic1", (byte) 96, (byte) 0);
	public static final TIInstruction Pictwo = instruction("Pic2", (byte) 96, (byte) 1);
	public static final TIInstruction Picthree = instruction("Pic3", (byte) 96, (byte) 2);
	public static final TIInstruction Picfour = instruction("Pic4", (byte) 96, (byte) 3);
	public static final TIInstruction Picfive = instruction("Pic5", (byte) 96, (byte) 4);
	public static final TIInstruction Picsix = instruction("Pic6", (byte) 96, (byte) 5);
	public static final TIInstruction Picseven = instruction("Pic7", (byte) 96, (byte) 6);
	public static final TIInstruction Piceight = instruction("Pic8", (byte) 96, (byte) 7);
	public static final TIInstruction Picnine = instruction("Pic9", (byte) 96, (byte) 8);
	public static final TIInstruction Piczero = instruction("Pic0", (byte) 96, (byte) 9);
	public static final TIInstruction GDBone = instruction("GDB1", (byte) 97, (byte) 0);
	public static final TIInstruction GDBtwo = instruction("GDB2", (byte) 97, (byte) 1);
	public static final TIInstruction GDBthree = instruction("GDB3", (byte) 97, (byte) 2);
	public static final TIInstruction GDBfour = instruction("GDB4", (byte) 97, (byte) 3);
	public static final TIInstruction GDBfive = instruction("GDB5", (byte) 97, (byte) 4);
	public static final TIInstruction GDBsix = instruction("GDB6", (byte) 97, (byte) 5);
	public static final TIInstruction GDBseven = instruction("GDB7", (byte) 97, (byte) 6);
	public static final TIInstruction GDBeight = instruction("GDB8", (byte) 97, (byte) 7);
	public static final TIInstruction GDBnine = instruction("GDB9", (byte) 97, (byte) 8);
	public static final TIInstruction GDBzero = instruction("GDB0", (byte) 97, (byte) 9);
	public static final TIInstruction eta = instruction("&eta", (byte) 98, (byte) 33);
	public static final TIInstruction Radian = instruction("Radian", 100);
	public static final TIInstruction Degree = instruction("Degree", 101);
	public static final TIInstruction Normal = instruction("Normal", 102);
	public static final TIInstruction Sci = instruction("Sci", 103);
	public static final TIInstruction Eng = instruction("Eng", 104);
	public static final TIInstruction Float = instruction("Float", 105);
	public static final TIInstruction TEST_EQUAL = instruction("=", 106);
	public static final TIInstruction TEST_LESS = instruction("<", 107);
	public static final TIInstruction TEST_GREATER = instruction(">", 108);
	public static final TIInstruction TEST_LESS_OR_EQUAL = instruction("<=", 109);
	public static final TIInstruction TEST_GREATER_OR_EQUAL = instruction(">=", 110);
	public static final TIInstruction TEST_NOT_EQUAL = instruction("!=", 111);
	public static final TIInstruction PLUS = instruction("+", 112);
	public static final TIInstruction MINUS = instruction("-", 113);
	public static final TIInstruction Ans = instruction("Ans", 114);
	public static final TIInstruction Fix = instruction("Fix", 115);
	public static final TIInstruction Horiz = instruction("Horiz", 116);
	public static final TIInstruction Full = instruction("Full", 117);
	public static final TIInstruction Func = instruction("Func", 118);
	public static final TIInstruction Param = instruction("Param", 119);
	public static final TIInstruction Polar = instruction("Polar", 120);
	public static final TIInstruction Seq = instruction("Seq", 121);
	public static final TIInstruction IndpntAuto = instruction("IndpntAuto", 122);
	public static final TIInstruction IndpntAsk = instruction("IndpntAsk", 123);
	public static final TIInstruction DependAuto = instruction("DependAuto", 124);
	public static final TIInstruction DependAsk = instruction("DependAsk", 125);
	public static final TIInstruction Sequential = instruction("Sequential", (byte) 126, (byte) 0);
	public static final TIInstruction Simul = instruction("Simul", (byte) 126, (byte) 1);
	public static final TIInstruction PolarGC = instruction("PolarGC", (byte) 126, (byte) 2);
	public static final TIInstruction RectGC = instruction("RectGC", (byte) 126, (byte) 3);
	public static final TIInstruction CoordOn = instruction("CoordOn", (byte) 126, (byte) 4);
	public static final TIInstruction CoordOff = instruction("CoordOff", (byte) 126, (byte) 5);
	public static final TIInstruction Connected = instruction("Connected", (byte) 126, (byte) 6);
	public static final TIInstruction Dot = instruction("Dot", (byte) 126, (byte) 7);
	public static final TIInstruction AxesOn = instruction("AxesOn", (byte) 126, (byte) 8);
	public static final TIInstruction AxesOff = instruction("AxesOff", (byte) 126, (byte) 9);
	public static final TIInstruction GridOn = instruction("GridOn", (byte) 126, (byte) 10);
	public static final TIInstruction GridOff = instruction("GridOff", (byte) 126, (byte) 11);
	public static final TIInstruction LabelOn = instruction("LabelOn", (byte) 126, (byte) 12);
	public static final TIInstruction LabelOff = instruction("LabelOff", (byte) 126, (byte) 13);
	public static final TIInstruction Web = instruction("Web", (byte) 126, (byte) 14);
	public static final TIInstruction Time = instruction("Time", (byte) 126, (byte) 15);
	public static final TIInstruction uvAxes = instruction("uvAxes", (byte) 126, (byte) 16);
	public static final TIInstruction uwAxes = instruction("uwAxes", (byte) 126, (byte) 17);
	public static final TIInstruction vwAxes = instruction("vwAxes", (byte) 126, (byte) 18);
	public static final TIInstruction square = instruction("&square", 127);
	public static final TIInstruction plus = instruction("&plus", 128);
	public static final TIInstruction dot = instruction("&dot", 129);
	public static final TIInstruction MULTIPLY = instruction("*", 130);
	public static final TIInstruction DIVIDE = instruction("/", 131);
	public static final TIInstruction Trace = instruction("Trace", 132);
	public static final TIInstruction ClrDraw = instruction("ClrDraw", 133);
	public static final TIInstruction ZStandard = instruction("ZStandard", 134);
	public static final TIInstruction ZTrig = instruction("ZTrig", 135);
	public static final TIInstruction ZBox = instruction("ZBox", 136);
	public static final TIInstruction ZoomIn = instruction("Zoom In", 137);
	public static final TIInstruction ZoomOut = instruction("Zoom Out", 138);
	public static final TIInstruction ZSquare = instruction("ZSquare", 139);
	public static final TIInstruction ZInteger = instruction("ZInteger", 140);
	public static final TIInstruction ZPrevious = instruction("ZPrevious", 141);
	public static final TIInstruction ZDecimal = instruction("ZDecimal", 142);
	public static final TIInstruction ZoomStat = instruction("ZoomStat", 143);
	public static final TIInstruction ZoomRcl = instruction("ZoomRcl", 144);
	public static final TIInstruction ZoomSto = instruction("ZoomSto", 146);
	public static final TIInstruction Text_func = instruction("Text(", 147);
	public static final TIInstruction nPr = instruction(" nPr ", 148);
	public static final TIInstruction nCr = instruction(" nCr ", 149);
	public static final TIInstruction FnOn = instruction("FnOn ", 150);
	public static final TIInstruction FnOff = instruction("FnOff ", 151);
	public static final TIInstruction StorePic = instruction("StorePic ", 152);
	public static final TIInstruction RecallPic = instruction("RecallPic ", 153);
	public static final TIInstruction StoreGDB = instruction("StoreGDB ", 154);
	public static final TIInstruction RecallGDB = instruction("RecallGDB ", 155);
	public static final TIInstruction Line_func = instruction("Line(", 156);
	public static final TIInstruction Vertical = instruction("Vertical ", 157);
	public static final TIInstruction PtOn_func = instruction("Pt-On(", 158);
	public static final TIInstruction PtOff_func = instruction("Pt-Off(", 159);
	public static final TIInstruction PtChange_func = instruction("Pt-Change(", 160);
	public static final TIInstruction PxlOn_func = instruction("Pxl-On(", 161);
	public static final TIInstruction PxlOff_func = instruction("Pxl-Off(", 162);
	public static final TIInstruction PxlChange_func = instruction("Pxl-Change(", 163);
	public static final TIInstruction Shade_func = instruction("Shade(", 164);
	public static final TIInstruction Circle_func = instruction("Circle(", 165);
	public static final TIInstruction Horizontal = instruction("Horizontal ", 166);
	public static final TIInstruction Tangent_func = instruction("Tangent(", 167);
	public static final TIInstruction DrawInv = instruction("DrawInv ", 168);
	public static final TIInstruction DrawF = instruction("DrawF ", 169);
	public static final TIInstruction Strone = instruction("Str1", (byte) 170, (byte) 0);
	public static final TIInstruction Strtwo = instruction("Str2", (byte) 170, (byte) 1);
	public static final TIInstruction Strthree = instruction("Str3", (byte) 170, (byte) 2);
	public static final TIInstruction Strfour = instruction("Str4", (byte) 170, (byte) 3);
	public static final TIInstruction Strfive = instruction("Str5", (byte) 170, (byte) 4);
	public static final TIInstruction Strsix = instruction("Str6", (byte) 170, (byte) 5);
	public static final TIInstruction Strseven = instruction("Str7", (byte) 170, (byte) 6);
	public static final TIInstruction Streight = instruction("Str8", (byte) 170, (byte) 7);
	public static final TIInstruction Strnine = instruction("Str9", (byte) 170, (byte) 8);
	public static final TIInstruction Strzero = instruction("Str0", (byte) 170, (byte) 9);
	public static final TIInstruction rand = instruction("rand", 171);
	public static final TIInstruction pi = instruction("&pi", 172);
	public static final TIInstruction getKey = instruction("getKey", 173);
	public static final TIInstruction APOSTROPHE = instruction("'", 174);
	public static final TIInstruction MYSTERY_MARK = instruction("?", 175);
	public static final TIInstruction NEGATIVE = instruction("&-", 176);
	public static final TIInstruction int_func = instruction("int(", 177);
	public static final TIInstruction abs_func = instruction("abs(", 178);
	public static final TIInstruction det_func = instruction("det(", 179);
	public static final TIInstruction identity_func = instruction("identity(", 180);
	public static final TIInstruction dim_func = instruction("dim(", 181);
	public static final TIInstruction sum_func = instruction("sum(", 182);
	public static final TIInstruction prod_func = instruction("prod(", 183);
	public static final TIInstruction not_func = instruction("not(", 184);
	public static final TIInstruction iPart_func = instruction("iPart(", 185);
	public static final TIInstruction fPart_func = instruction("fPart(", 186);
	public static final TIInstruction dbd_func = instruction("dbd(", (byte) 187, (byte) 7);
	public static final TIInstruction lcm_func = instruction("lcm(", (byte) 187, (byte) 8);
	public static final TIInstruction gcd_func = instruction("gcd(", (byte) 187, (byte) 9);
	public static final TIInstruction randInt_func = instruction("randInt(", (byte) 187, (byte) 10);
	public static final TIInstruction randBin_func = instruction("randBin(", (byte) 187, (byte) 11);
	public static final TIInstruction sub_func = instruction("sub(", (byte) 187, (byte) 12);
	public static final TIInstruction stdDev_func = instruction("stdDev(", (byte) 187, (byte) 13);
	public static final TIInstruction variance_func = instruction("variance(", (byte) 187, (byte) 14);
	public static final TIInstruction inString_func = instruction("inString(", (byte) 187, (byte) 15);
	public static final TIInstruction conj_func = instruction("conj(", (byte) 187, (byte) 37);
	public static final TIInstruction real_func = instruction("real(", (byte) 187, (byte) 38);
	public static final TIInstruction imag_func = instruction("imag(", (byte) 187, (byte) 39);
	public static final TIInstruction angle_func = instruction("angle(", (byte) 187, (byte) 40);
	public static final TIInstruction cumSum_func = instruction("cumSum(", (byte) 187, (byte) 41);
	public static final TIInstruction expr_func = instruction("expr(", (byte) 187, (byte) 42);
	public static final TIInstruction length_func = instruction("length(", (byte) 187, (byte) 43);
	public static final TIInstruction deltaList_func = instruction("&deltaList(", (byte) 187, (byte) 44);
	public static final TIInstruction ref_func = instruction("ref(", (byte) 187, (byte) 45);
	public static final TIInstruction rref_func = instruction("rref(", (byte) 187, (byte) 46);
	public static final TIInstruction GRect = instruction(">Rect", (byte) 187, (byte) 47);
	public static final TIInstruction GPolar = instruction(">Polar", (byte) 187, (byte) 48);
	public static final TIInstruction e_const = instruction("&e", (byte) 187, (byte) 49);
	public static final TIInstruction GraphStyle_func = instruction("GraphStyle(", (byte) 187, (byte) 69);
	public static final TIInstruction Real = instruction("Real", (byte) 187, (byte) 77);
	public static final TIInstruction rethetai = instruction("&re^thetai", (byte) 187, (byte) 78);
	public static final TIInstruction abi = instruction("&a+bi", (byte) 187, (byte) 79);
	public static final TIInstruction ExprOn = instruction("ExprOn", (byte) 187, (byte) 80);
	public static final TIInstruction ExprOff = instruction("ExprOff", (byte) 187, (byte) 81);
	public static final TIInstruction ClrAllLists = instruction("ClrAllLists", (byte) 187, (byte) 82);
	public static final TIInstruction GetCalc_func = instruction("GetCalc(", (byte) 187, (byte) 83);
	public static final TIInstruction DelVar = instruction("DelVar ", (byte) 187, (byte) 84);
	public static final TIInstruction EquString_func = instruction("Equ>String(", (byte) 187, (byte) 85);
	public static final TIInstruction StringEqu_func = instruction("String>Equ(", (byte) 187, (byte) 86);
	public static final TIInstruction ClearEntries = instruction("Clear Entries", (byte) 187, (byte) 87);
	public static final TIInstruction GT = instruction("&G-T", (byte) 187, (byte) 100);
	public static final TIInstruction ZoomFit = instruction("ZoomFit", (byte) 187, (byte) 101);
	public static final TIInstruction DiagnosticOn = instruction("DiagnosticOn", (byte) 187, (byte) 102);
	public static final TIInstruction DiagnosticOff = instruction("DiagnosticOff", (byte) 187, (byte) 103);
	public static final TIInstruction Archive = instruction("Archive ", (byte) 187, (byte) 104);
	public static final TIInstruction UnArchive = instruction("UnArchive ", (byte) 187, (byte) 105);
	public static final TIInstruction Asm_func = instruction("Asm(", (byte) 187, (byte) 106);
	public static final TIInstruction AsmComp_func = instruction("AsmComp(", (byte) 187, (byte) 107);
	public static final TIInstruction AsmPrgm = instruction("AsmPrgm", (byte) 187, (byte) 108);
	public static final TIInstruction compiledasm = instruction("compiled asm", (byte) 187, (byte) 109);
	public static final TIInstruction A_ACUTE = instruction("Á", (byte) 187, (byte) 110);
	public static final TIInstruction A_GRAVE = instruction("À", (byte) 187, (byte) 111);
	public static final TIInstruction A_CIRCUMFLEX = instruction("Â", (byte) 187, (byte) 112);
	public static final TIInstruction A_DIAERESIS = instruction("Ä", (byte) 187, (byte) 113);
	public static final TIInstruction a_ACUTE = instruction("á", (byte) 187, (byte) 114);
	public static final TIInstruction a_GRAVE = instruction("à", (byte) 187, (byte) 115);
	public static final TIInstruction a_CIRCUMFLEX = instruction("â", (byte) 187, (byte) 116);
	public static final TIInstruction a_DIAERESIS = instruction("ä", (byte) 187, (byte) 117);
	public static final TIInstruction E_ACUTE = instruction("É", (byte) 187, (byte) 118);
	public static final TIInstruction E_GRAVE = instruction("È", (byte) 187, (byte) 119);
	public static final TIInstruction E_CIRCUMFLEX = instruction("Ê", (byte) 187, (byte) 120);
	public static final TIInstruction E_DIAERESIS = instruction("Ë", (byte) 187, (byte) 121);
	public static final TIInstruction e_ACUTE = instruction("é", (byte) 187, (byte) 122);
	public static final TIInstruction e_GRAVE = instruction("è", (byte) 187, (byte) 123);
	public static final TIInstruction e_CIRCUMFLEX = instruction("ê", (byte) 187, (byte) 124);
	public static final TIInstruction e_DIAERESIS = instruction("ë", (byte) 187, (byte) 125);
	public static final TIInstruction I_GRAVE = instruction("Ì", (byte) 187, (byte) 127);
	public static final TIInstruction I_CIRCUMFLEX = instruction("Î", (byte) 187, (byte) 128);
	public static final TIInstruction I_DIAERESIS = instruction("Ï", (byte) 187, (byte) 129);
	public static final TIInstruction i_ACUTE = instruction("í", (byte) 187, (byte) 130);
	public static final TIInstruction i_GRAVE = instruction("ì", (byte) 187, (byte) 131);
	public static final TIInstruction i_CIRCUMFLEX = instruction("î", (byte) 187, (byte) 132);
	public static final TIInstruction i_DIAERESIS = instruction("ï", (byte) 187, (byte) 133);
	public static final TIInstruction O_ACUTE = instruction("Ó", (byte) 187, (byte) 134);
	public static final TIInstruction O_GRAVE = instruction("Ò", (byte) 187, (byte) 135);
	public static final TIInstruction O_CIRCUMFLEX = instruction("Ô", (byte) 187, (byte) 136);
	public static final TIInstruction O_DIAERESIS = instruction("Ö", (byte) 187, (byte) 137);
	public static final TIInstruction o_ACUTE = instruction("ó", (byte) 187, (byte) 138);
	public static final TIInstruction o_GRAVE = instruction("ò", (byte) 187, (byte) 139);
	public static final TIInstruction o_CIRCUMFLEX = instruction("ô", (byte) 187, (byte) 140);
	public static final TIInstruction o_DIAERESIS = instruction("ö", (byte) 187, (byte) 141);
	public static final TIInstruction U_ACUTE = instruction("Ú", (byte) 187, (byte) 142);
	public static final TIInstruction U_GRAVE = instruction("Ù", (byte) 187, (byte) 143);
	public static final TIInstruction U_CIRCUMFLEX = instruction("Û", (byte) 187, (byte) 144);
	public static final TIInstruction U_DIAERESIS = instruction("Ü", (byte) 187, (byte) 145);
	public static final TIInstruction u_ACUTE = instruction("ú", (byte) 187, (byte) 146);
	public static final TIInstruction u_GRAVE = instruction("ù", (byte) 187, (byte) 147);
	public static final TIInstruction u_CIRCUMFLEX = instruction("û", (byte) 187, (byte) 148);
	public static final TIInstruction u_DIAERESIS = instruction("ü", (byte) 187, (byte) 149);
	public static final TIInstruction C_CEDILLA = instruction("Ç", (byte) 187, (byte) 150);
	public static final TIInstruction c_CEDILLA = instruction("ç", (byte) 187, (byte) 151);
	public static final TIInstruction N_TILDE = instruction("Ñ", (byte) 187, (byte) 152);
	public static final TIInstruction n_TILDE = instruction("ñ", (byte) 187, (byte) 153);
	public static final TIInstruction ACUTE_ACCENT = instruction("´", (byte) 187, (byte) 154);
	public static final TIInstruction GRAVE_ACCENT = instruction("`", (byte) 187, (byte) 155);
	public static final TIInstruction EXTRA_DOUBLE_QUOTE = instruction("&\"", (byte) 187, (byte) 156);
	public static final TIInstruction UPSIDE_DOWN_QUESTION_MARK = instruction("&?", (byte) 187, (byte) 157);
	public static final TIInstruction UPSIDE_DOWN_EXCLAMATION_MARK = instruction("&!", (byte) 187, (byte) 158);
	public static final TIInstruction alpha = instruction("&alpha", (byte) 187, (byte) 159);
	public static final TIInstruction beta = instruction("&beta", (byte) 187, (byte) 160);
	public static final TIInstruction gamma = instruction("&gamma", (byte) 187, (byte) 161);
	public static final TIInstruction delta = instruction("&delta", (byte) 187, (byte) 162);
	public static final TIInstruction ldelta = instruction("&ldelta", (byte) 187, (byte) 163);
	public static final TIInstruction epsilon = instruction("&epsilon", (byte) 187, (byte) 164);
	public static final TIInstruction lambda = instruction("&lambda", (byte) 187, (byte) 165);
	public static final TIInstruction mu = instruction("&mu", (byte) 187, (byte) 166);
	public static final TIInstruction xpi = instruction("&xpi", (byte) 187, (byte) 167);
	public static final TIInstruction rho = instruction("&rho", (byte) 187, (byte) 168);
	public static final TIInstruction sigma = instruction("&sigma", (byte) 187, (byte) 169);
	public static final TIInstruction phi = instruction("&phi", (byte) 187, (byte) 171);
	public static final TIInstruction omega = instruction("&omega", (byte) 187, (byte) 172);
	public static final TIInstruction chi = instruction("&chi", (byte) 187, (byte) 174);
	public static final TIInstruction _a = instruction("stats_a", (byte) 187, (byte) 176);
	public static final TIInstruction _b = instruction("stats_b", (byte) 187, (byte) 177);
	public static final TIInstruction _c = instruction("stats_c", (byte) 187, (byte) 178);
	public static final TIInstruction _d = instruction("stats_d", (byte) 187, (byte) 179);
	public static final TIInstruction _e = instruction("stats_e", (byte) 187, (byte) 180);
	public static final TIInstruction f = instruction("f", (byte) 187, (byte) 181);
	public static final TIInstruction g = instruction("g", (byte) 187, (byte) 182);
	public static final TIInstruction h = instruction("h", (byte) 187, (byte) 183);
	public static final TIInstruction i = instruction("i", (byte) 187, (byte) 184);
	public static final TIInstruction j = instruction("j", (byte) 187, (byte) 185);
	public static final TIInstruction k = instruction("k", (byte) 187, (byte) 186);
	public static final TIInstruction l = instruction("l", (byte) 187, (byte) 188);
	public static final TIInstruction m = instruction("m", (byte) 187, (byte) 189);
	public static final TIInstruction NUM = instruction("num", (byte) 187, (byte) 190);
	public static final TIInstruction o = instruction("o", (byte) 187, (byte) 191);
	public static final TIInstruction _p = instruction("stats_p", (byte) 187, (byte) 192);
	public static final TIInstruction q = instruction("q", (byte) 187, (byte) 193);
	public static final TIInstruction _r = instruction("stats_r", (byte) 187, (byte) 194);
	public static final TIInstruction STANDARD_DEVIATION = instruction("STD", (byte) 187, (byte) 195);
	public static final TIInstruction _t = instruction("stats_t", (byte) 187, (byte) 196);
	public static final TIInstruction au = instruction("&u", (byte) 187, (byte) 197);
	public static final TIInstruction av = instruction("&v", (byte) 187, (byte) 198);
	public static final TIInstruction w = instruction("w", (byte) 187, (byte) 199);
	public static final TIInstruction x = instruction("x", (byte) 187, (byte) 200);
	public static final TIInstruction y = instruction("y", (byte) 187, (byte) 201);
	public static final TIInstruction _z = instruction("stats_z", (byte) 187, (byte) 202);
	public static final TIInstruction lsigma = instruction("&lsigma", (byte) 187, (byte) 203);
	public static final TIInstruction smallTone = instruction("&smallT1", (byte) 187, (byte) 204);
	public static final TIInstruction I_ACUTE = instruction("Í", (byte) 187, (byte) 205);
	public static final TIInstruction GarbageCollect = instruction("GarbageCollect", (byte) 187, (byte) 206);
	public static final TIInstruction TILDE = instruction("~", (byte) 187, (byte) 207);
	public static final TIInstruction AT = instruction("@", (byte) 187, (byte) 209);
	public static final TIInstruction NUMBER_SIGN = instruction("#", (byte) 187, (byte) 210);
	public static final TIInstruction DOLLAR_SIGN = instruction("$", (byte) 187, (byte) 211);
	public static final TIInstruction AMPERSAND_ESCAPE = instruction("&&", (byte) 187, (byte) 212);
	//Not sure what this is for. Adding a 2 suffix to avoid map overwrites
	public static final TIInstruction GRAVE_ACCENT_2 = instruction("`2", (byte) 187, (byte) 213);
	public static final TIInstruction SEMICOLON = instruction(";", (byte) 187, (byte) 214);
	public static final TIInstruction REVERSE_SLASH = instruction("\\", (byte) 187, (byte) 215);
	public static final TIInstruction VERTICAL = instruction("|", (byte) 187, (byte) 216);
	public static final TIInstruction UNDERSCORE = instruction("_", (byte) 187, (byte) 217);
	public static final TIInstruction PERCENT_SIGN = instruction("%", (byte) 187, (byte) 218);
	public static final TIInstruction ELLIPSIS = instruction("&...", (byte) 187, (byte) 219);
	public static final TIInstruction angle = instruction("&angle", (byte) 187, (byte) 220);
	//Not sure what this is for. Adding a 2 suffix to avoid map overwrites
	public static final TIInstruction beta2 = instruction("&beta2", (byte) 187, (byte) 221);
	public static final TIInstruction smallxone = instruction("&smallx1", (byte) 187, (byte) 222);
	public static final TIInstruction smallTtwo = instruction("&smallT2", (byte) 187, (byte) 223);
	public static final TIInstruction smallzero = instruction("&small0", (byte) 187, (byte) 224);
	public static final TIInstruction smallone = instruction("&small1", (byte) 187, (byte) 225);
	public static final TIInstruction smalltwo = instruction("&small2", (byte) 187, (byte) 226);
	public static final TIInstruction smallthree = instruction("&small3", (byte) 187, (byte) 227);
	public static final TIInstruction smallfour = instruction("&small4", (byte) 187, (byte) 228);
	public static final TIInstruction smallfive = instruction("&small5", (byte) 187, (byte) 229);
	public static final TIInstruction smallsix = instruction("&small6", (byte) 187, (byte) 230);
	public static final TIInstruction smallseven = instruction("&small7", (byte) 187, (byte) 231);
	public static final TIInstruction smalleight = instruction("&small8", (byte) 187, (byte) 232);
	public static final TIInstruction smallnine = instruction("&small9", (byte) 187, (byte) 233);
	public static final TIInstruction smallonezero = instruction("&small10", (byte) 187, (byte) 234);
	public static final TIInstruction leftarrow = instruction("&leftarrow", (byte) 187, (byte) 235);
	public static final TIInstruction rightarrow = instruction("&rightarrow", (byte) 187, (byte) 236);
	public static final TIInstruction uparrowsmall = instruction("&uparrowsmall", (byte) 187, (byte) 237);
	public static final TIInstruction downarrowsmall = instruction("&downarrowsmall", (byte) 187, (byte) 238);
	public static final TIInstruction smallxtwo = instruction("&smallx2", (byte) 187, (byte) 239);
	public static final TIInstruction integral = instruction("&integral", (byte) 187, (byte) 240);
	public static final TIInstruction uparrow = instruction("&uparrow", (byte) 187, (byte) 241);
	public static final TIInstruction downarrow = instruction("&downarrow", (byte) 187, (byte) 242);
	public static final TIInstruction squareroot = instruction("&squareroot", (byte) 187, (byte) 243);
	public static final TIInstruction highlightedequals = instruction("&highlightedequals", (byte) 187, (byte) 244);
	public static final TIInstruction squareroot_func = instruction("&squareroot(", 188);
	public static final TIInstruction cuberoot_func = instruction("&cuberoot(", 189);
	public static final TIInstruction ln_func = instruction("ln(", 190);
	public static final TIInstruction e_func = instruction("&e^(", 191);
	public static final TIInstruction log_func = instruction("log(", 192);
	public static final TIInstruction onezero_func = instruction("10^(", 193);
	public static final TIInstruction sin_func = instruction("sin(", 194);
	public static final TIInstruction arcsin_func = instruction("&arcsin(", 195);
	public static final TIInstruction cos_func = instruction("cos(", 196);
	public static final TIInstruction arccos_func = instruction("&arccos(", 197);
	public static final TIInstruction tan_func = instruction("tan(", 198);
	public static final TIInstruction arctan_func = instruction("&arctan(", 199);
	public static final TIInstruction sinh_func = instruction("sinh(", 200);
	public static final TIInstruction arcsinh_func = instruction("&arcsinh(", 201);
	public static final TIInstruction cosh_func = instruction("cosh(", 202);
	public static final TIInstruction arccosh_func = instruction("&arccosh(", 203);
	public static final TIInstruction tanh_func = instruction("tanh(", 204);
	public static final TIInstruction arctanh_func = instruction("&arctanh(", 205);
	public static final TIInstruction If = instruction("If ", 206);
	public static final TIInstruction Then = instruction("Then", 207);
	public static final TIInstruction Else = instruction("Else", 208);
	public static final TIInstruction While = instruction("While ", 209);
	public static final TIInstruction Repeat = instruction("Repeat ", 210);
	public static final TIInstruction For_func = instruction("For(", 211);
	public static final TIInstruction End = instruction("End", 212);
	public static final TIInstruction Return = instruction("Return", 213);
	public static final TIInstruction Lbl = instruction("Lbl ", 214);
	public static final TIInstruction Goto = instruction("Goto ", 215);
	public static final TIInstruction Pause = instruction("Pause ", 216);
	public static final TIInstruction Stop = instruction("Stop", 217);
	public static final TIInstruction IS_func = instruction("IS>(", 218);
	public static final TIInstruction DS_func = instruction("DS<(", 219);
	public static final TIInstruction Input = instruction("Input ", 220);
	public static final TIInstruction Prompt = instruction("Prompt ", 221);
	public static final TIInstruction Disp = instruction("Disp ", 222);
	public static final TIInstruction DispGraph = instruction("DispGraph", 223);
	public static final TIInstruction Output_func = instruction("Output(", 224);
	public static final TIInstruction ClrHome = instruction("ClrHome", 225);
	public static final TIInstruction Fill_func = instruction("Fill(", 226);
	public static final TIInstruction SortA_func = instruction("SortA(", 227);
	public static final TIInstruction SortD_func = instruction("SortD(", 228);
	public static final TIInstruction DispTable = instruction("DispTable", 229);
	public static final TIInstruction Menu_func = instruction("Menu(", 230);
	public static final TIInstruction Send_func = instruction("Send(", 231);
	public static final TIInstruction Get_func = instruction("Get(", 232);
	public static final TIInstruction list = instruction("&list", 235);
	public static final TIInstruction CIRCUMFLEX_ACCENT = instruction("^", 240);
	public static final TIInstruction root = instruction("&root", 241);
	public static final TIInstruction CubicReg = instruction("CubicReg", 46);
	public static final TIInstruction QuartReg = instruction("QuartReg", 47);
	public static final TIInstruction RPr_func = instruction("R>Pr(", 27);
	public static final TIInstruction RPtheta = instruction("R>Ptheta", 28);
	public static final TIInstruction PRx_func = instruction("P>Rx(", 29);
	public static final TIInstruction PRy = instruction("P>Ry", 30);
	public static final TIInstruction RegEq = instruction("RegEq", (byte) 98, (byte) 1);
	public static final TIInstruction n = instruction("n", (byte) 98, (byte) 2);
	public static final TIInstruction xbar = instruction("xbar", (byte) 98, (byte) 3);
	public static final TIInstruction sumx = instruction("sumx", (byte) 98, (byte) 4);
	public static final TIInstruction sumxtwo = instruction("sumx^2", (byte) 98, (byte) 5);
	public static final TIInstruction Sx = instruction("Sx", (byte) 98, (byte) 6);
	public static final TIInstruction sigmax = instruction("sigmax", (byte) 98, (byte) 7);
	public static final TIInstruction minX = instruction("minX", (byte) 98, (byte) 8);
	public static final TIInstruction maxX = instruction("maxX", (byte) 98, (byte) 9);
	public static final TIInstruction minY = instruction("minY", (byte) 98, (byte) 10);
	public static final TIInstruction maxY = instruction("maxY", (byte) 98, (byte) 11);
	public static final TIInstruction ybar = instruction("ybar", (byte) 98, (byte) 12);
	public static final TIInstruction sumy = instruction("sumy", (byte) 98, (byte) 13);
	public static final TIInstruction sumytwo = instruction("sumy^2", (byte) 98, (byte) 14);
	public static final TIInstruction Sy = instruction("Sy", (byte) 98, (byte) 15);
	public static final TIInstruction sigmay = instruction("sigmay", (byte) 98, (byte) 16);
	public static final TIInstruction sumxy = instruction("sumxy", (byte) 98, (byte) 17);
	public static final TIInstruction r = instruction("r", (byte) 98, (byte) 18);
	public static final TIInstruction Med = instruction("Med", (byte) 98, (byte) 19);
	public static final TIInstruction Qone = instruction("Q1", (byte) 98, (byte) 20);
	public static final TIInstruction Qthree = instruction("Q3", (byte) 98, (byte) 21);
	public static final TIInstruction a = instruction("a", (byte) 98, (byte) 22);
	public static final TIInstruction b = instruction("b", (byte) 98, (byte) 23);
	public static final TIInstruction c = instruction("c", (byte) 98, (byte) 24);
	public static final TIInstruction d = instruction("d", (byte) 98, (byte) 25);
	public static final TIInstruction e = instruction("e", (byte) 98, (byte) 26);
	public static final TIInstruction xone = instruction("x1", (byte) 98, (byte) 27);
	public static final TIInstruction xtwo = instruction("x2", (byte) 98, (byte) 28);
	public static final TIInstruction xthree = instruction("x3", (byte) 98, (byte) 29);
	public static final TIInstruction yone = instruction("y1", (byte) 98, (byte) 30);
	public static final TIInstruction ytwo = instruction("y2", (byte) 98, (byte) 31);
	public static final TIInstruction ythree = instruction("y3", (byte) 98, (byte) 32);
	public static final TIInstruction p = instruction("p", (byte) 98, (byte) 34);
	public static final TIInstruction z = instruction("z", (byte) 98, (byte) 35);
	public static final TIInstruction t = instruction("t", (byte) 98, (byte) 36);
	public static final TIInstruction Xtwo = instruction("X^2", (byte) 98, (byte) 37);
	public static final TIInstruction _F = instruction("stats_F", (byte) 98, (byte) 38);
	public static final TIInstruction df = instruction("df", (byte) 98, (byte) 39);
	public static final TIInstruction pcarat = instruction("pcarat", (byte) 98, (byte) 40);
	public static final TIInstruction pcaratone = instruction("pcarat1", (byte) 98, (byte) 41);
	public static final TIInstruction pcarattwo = instruction("pcarat2", (byte) 98, (byte) 42);
	public static final TIInstruction xbarone = instruction("xbar1", (byte) 98, (byte) 43);
	public static final TIInstruction Sxone = instruction("Sx1", (byte) 98, (byte) 44);
	public static final TIInstruction none = instruction("n1", (byte) 98, (byte) 45);
	public static final TIInstruction xbartwo = instruction("xbar2", (byte) 98, (byte) 46);
	public static final TIInstruction Sxtwo = instruction("Sx2", (byte) 98, (byte) 47);
	public static final TIInstruction ntwo = instruction("n2", (byte) 98, (byte) 48);
	public static final TIInstruction Sxp = instruction("Sxp", (byte) 98, (byte) 49);
	public static final TIInstruction lower = instruction("lower", (byte) 98, (byte) 50);
	public static final TIInstruction upper = instruction("upper", (byte) 98, (byte) 51);
	public static final TIInstruction s = instruction("s", (byte) 98, (byte) 52);
	public static final TIInstruction r_sqr = instruction("r^2", (byte) 98, (byte) 53);
	public static final TIInstruction R_sqr = instruction("R^2", (byte) 98, (byte) 54);
	public static final TIInstruction Factordf = instruction("Factordf", (byte) 98, (byte) 55);
	public static final TIInstruction FactorSS = instruction("FactorSS", (byte) 98, (byte) 56);
	public static final TIInstruction FactorMS = instruction("FactorMS", (byte) 98, (byte) 57);
	public static final TIInstruction Errordf = instruction("Errordf", (byte) 98, (byte) 58);
	public static final TIInstruction ErrorSS = instruction("ErrorSS", (byte) 98, (byte) 59);
	public static final TIInstruction ErrorMS = instruction("ErrorMS", (byte) 98, (byte) 60);
	public static final TIInstruction normalcdf_func = instruction("normalcdf(", (byte) 187, (byte) 16);
	public static final TIInstruction invNorm_func = instruction("invNorm(", (byte) 187, (byte) 17);
	public static final TIInstruction tcdf_func = instruction("tcdf(", (byte) 187, (byte) 18);
	public static final TIInstruction Xtwocdf_func = instruction("&X^2cdf(", (byte) 187, (byte) 19);
	public static final TIInstruction Fcdf_func = instruction("&Fcdf(", (byte) 187, (byte) 20);
	public static final TIInstruction binompdf_func = instruction("binompdf(", (byte) 187, (byte) 21);
	public static final TIInstruction binomcdf_func = instruction("binomcdf(", (byte) 187, (byte) 22);
	public static final TIInstruction poissonpdf_func = instruction("poissonpdf(", (byte) 187, (byte) 23);
	public static final TIInstruction poissoncdf_func = instruction("poissoncdf(", (byte) 187, (byte) 24);
	public static final TIInstruction geometpdf_func = instruction("geometpdf(", (byte) 187, (byte) 25);
	public static final TIInstruction geometcdf_func = instruction("geometcdf(", (byte) 187, (byte) 26);
	public static final TIInstruction normalpdf_func = instruction("normalpdf(", (byte) 187, (byte) 27);
	public static final TIInstruction tpdf_func = instruction("tpdf(", (byte) 187, (byte) 28);
	public static final TIInstruction Xtwopdf_func = instruction("&X^2pdf(", (byte) 187, (byte) 29);
	public static final TIInstruction Fpdf_func = instruction("&Fpdf(", (byte) 187, (byte) 30);
	public static final TIInstruction randNorm_func = instruction("randNorm(", (byte) 187, (byte) 31);
	public static final TIInstruction SinReg = instruction("SinReg ", (byte) 187, (byte) 50);
	public static final TIInstruction Logistic = instruction("Logistic ", (byte) 187, (byte) 51);
	public static final TIInstruction LinRegTTest = instruction("LinRegTTest ", (byte) 187, (byte) 52);
	public static final TIInstruction ShadeNorm_func = instruction("ShadeNorm(", (byte) 187, (byte) 53);
	public static final TIInstruction Shadet_func = instruction("Shade_t(", (byte) 187, (byte) 54);
	public static final TIInstruction ShadeXtwo = instruction("ShadeX^2", (byte) 187, (byte) 55);
	public static final TIInstruction ShadeF_func = instruction("ShadeF(", (byte) 187, (byte) 56);
	public static final TIInstruction Matrlist_func = instruction("Matr>list(", (byte) 187, (byte) 57);
	public static final TIInstruction Listmatr_func = instruction("List>matr(", (byte) 187, (byte) 58);
	public static final TIInstruction ZTest_func = instruction("Z-Test(", (byte) 187, (byte) 59);
	public static final TIInstruction TTest = instruction("T-Test ", (byte) 187, (byte) 60);
	public static final TIInstruction twoSampZTest_func = instruction("2-SampZTest(", (byte) 187, (byte) 61);
	public static final TIInstruction onePropZTest_func = instruction("1-PropZTest(", (byte) 187, (byte) 62);
	public static final TIInstruction twoPropZTest_func = instruction("2-PropZTest(", (byte) 187, (byte) 63);
	public static final TIInstruction XtwoTest_func = instruction("&X^2-Test(", (byte) 187, (byte) 64);
	public static final TIInstruction ZInterval = instruction("ZInterval ", (byte) 187, (byte) 65);
	public static final TIInstruction twoSampZInt_func = instruction("2-SampZInt(", (byte) 187, (byte) 66);
	public static final TIInstruction onePropZInt_func = instruction("1-PropZInt(", (byte) 187, (byte) 67);
	public static final TIInstruction twoPropZInt_func = instruction("2-PropZInt(", (byte) 187, (byte) 68);
	public static final TIInstruction twoSampTTest = instruction("2-SampTTest ", (byte) 187, (byte) 70);
	public static final TIInstruction twoSampFTest = instruction("2-SampFTest ", (byte) 187, (byte) 71);
	public static final TIInstruction TInterval = instruction("TInterval ", (byte) 187, (byte) 72);
	public static final TIInstruction twoSampTInt = instruction("2-SampTInt ", (byte) 187, (byte) 73);
	public static final TIInstruction SetUpEditor = instruction("SetUpEditor ", (byte) 187, (byte) 74);
	public static final TIInstruction PmtEnd = instruction("Pmt_End", (byte) 187, (byte) 75);
	public static final TIInstruction PmtBgn = instruction("Pmt_Bgn", (byte) 187, (byte) 76);
	public static final TIInstruction Select_func = instruction("Select(", (byte) 187, (byte) 88);
	public static final TIInstruction ANOVA_func = instruction("ANOVA(", (byte) 187, (byte) 89);
	public static final TIInstruction ModBoxplot = instruction("ModBoxplot", (byte) 187, (byte) 90);
	public static final TIInstruction NormProbPlot = instruction("NormProbPlot", (byte) 187, (byte) 91);
	public static final TIInstruction POW = instruction("&^p", (byte) 187, (byte) 173);
	public static final TIInstruction WITH_F = instruction("&F", (byte) 187, (byte) 175);
	public static final TIInstruction PlotsOn = instruction("PlotsOn ", 233);
	public static final TIInstruction PlotsOff = instruction("PlotsOff ", 234);
	public static final TIInstruction Plotone_func = instruction("Plot1(", 236);
	public static final TIInstruction Plottwo_func = instruction("Plot2(", 237);
	public static final TIInstruction Plotthree_func = instruction("Plot3(", 238);
	public static final TIInstruction oneVarStats = instruction("1-VarStats ", 242);
	public static final TIInstruction twoVarStats = instruction("2-VarStats ", 243);
	public static final TIInstruction LinReg_funcabx = instruction("LinReg(a+bx) ", 244);
	public static final TIInstruction ExpReg = instruction("ExpReg ", 245);
	public static final TIInstruction LnReg = instruction("LnReg ", 246);
	public static final TIInstruction PwrReg = instruction("PwrReg ", 247);
	public static final TIInstruction MedMed = instruction("Med-Med ", 248);
	public static final TIInstruction QuadReg = instruction("QuadReg ", 249);
	public static final TIInstruction ClrList = instruction("ClrList ", 250);
	public static final TIInstruction ClrTable = instruction("ClrTable", 251);
	public static final TIInstruction Histogram = instruction("Histogram", 252);
	public static final TIInstruction xyLine = instruction("xyLine", 253);
	public static final TIInstruction Scatter = instruction("Scatter", 254);
	public static final TIInstruction LinReg_funcaxb = instruction("LinReg(ax+b) ", 255);
	public static final TIInstruction npv_func = instruction("npv(", (byte) 187, (byte) 0);
	public static final TIInstruction irr_func = instruction("irr(", (byte) 187, (byte) 1);
	public static final TIInstruction bal_func = instruction("bal(", (byte) 187, (byte) 2);
	public static final TIInstruction sumprn_func = instruction("sumprn(", (byte) 187, (byte) 3);
	public static final TIInstruction sumInt_func = instruction("sumInt(", (byte) 187, (byte) 4);
	public static final TIInstruction Nom_func = instruction(">Nom(", (byte) 187, (byte) 5);
	public static final TIInstruction Eff_func = instruction(">Eff(", (byte) 187, (byte) 6);
	public static final TIInstruction tmvPmt = instruction("tmv_Pmt", (byte) 187, (byte) 32);
	public static final TIInstruction tmvI = instruction("tmv_I%", (byte) 187, (byte) 33);
	public static final TIInstruction tmvPV = instruction("tmv_PV", (byte) 187, (byte) 34);
	public static final TIInstruction tmvN = instruction("tmv_N", (byte) 187, (byte) 35);
	public static final TIInstruction tmvFV = instruction("tmv_FV", (byte) 187, (byte) 36);
	public static final TIInstruction setDate_func = instruction("setDate(", (byte) 239, (byte) 0);
	public static final TIInstruction setTime_func = instruction("setTime(", (byte) 239, (byte) 1);
	public static final TIInstruction checkTmr_func = instruction("checkTmr(", (byte) 239, (byte) 2);
	public static final TIInstruction setDtFmt_func = instruction("setDtFmt(", (byte) 239, (byte) 3);
	public static final TIInstruction setTmFmt_func = instruction("setTmFmt(", (byte) 239, (byte) 4);
	public static final TIInstruction timeCnv_func = instruction("timeCnv(", (byte) 239, (byte) 5);
	public static final TIInstruction dayOfWk_func = instruction("dayOfWk(", (byte) 239, (byte) 6);
	public static final TIInstruction getDtStr_func = instruction("getDtStr(", (byte) 239, (byte) 7);
	public static final TIInstruction getTmStr_func = instruction("getTmStr(", (byte) 239, (byte) 8);
	public static final TIInstruction getDate = instruction("getDate", (byte) 239, (byte) 9);
	public static final TIInstruction getTime = instruction("getTime", (byte) 239, (byte) 10);
	public static final TIInstruction startTmr = instruction("startTmr", (byte) 239, (byte) 11);
	public static final TIInstruction getDtFmt = instruction("getDtFmt", (byte) 239, (byte) 12);
	public static final TIInstruction getTmFmt = instruction("getTmFmt", (byte) 239, (byte) 13);
	public static final TIInstruction isClockOn = instruction("isClockOn", (byte) 239, (byte) 14);
	public static final TIInstruction ClockOff = instruction("ClockOff", (byte) 239, (byte) 15);
	public static final TIInstruction ClockOn = instruction("ClockOn", (byte) 239, (byte) 16);
	public static final TIInstruction OpenLib_func = instruction("OpenLib(", (byte) 239, (byte) 17);
	public static final TIInstruction ExecLib = instruction("ExecLib", (byte) 239, (byte) 18);
	public static final TIInstruction invT_func = instruction("invT(", (byte) 239, (byte) 19);
	public static final TIInstruction XtwoGOFTest_func = instruction("X^2GOF-Test(", (byte) 239, (byte) 20);
	public static final TIInstruction LinRegTInt = instruction("LinRegTInt", (byte) 239, (byte) 21);
	public static final TIInstruction ManualFit = instruction("Manual-Fit", (byte) 239, (byte) 22);

	/**
	 * Gets an array of instructions representing a string variable for a given {@link String}.
	 *
	 * @param string A {@link String} to get the instructions for.
	 * @return An array of instructions representing the given {@link String}.
	 */
	public static TIInstruction[] string(String string) {
		char[] chars = string.toCharArray();
		int charLength = chars.length;
		int length = charLength + 2;
		TIInstruction[] instructions = new TIInstruction[length];
		instructions[0] = STRING;
		for (int i = 0; i < charLength; i++) {
			char achar = chars[i];
			TIInstruction instruction = by(String.valueOf(achar));
			if (instruction == null) {
				throw new IllegalArgumentException("Found unknown valid character while processing string into TI instructions: " + achar);
			}
			instructions[i + 1] = instruction;
		}
		instructions[length - 1] = STRING;
		return instructions;
	}

	private static TIInstruction instruction(String name, List<Integer> bytecode) {
		TIInstruction instruction = new TIInstruction(name, bytecode);
		CODE_TO_INSTRUCTION.put(bytecode, instruction);
		NAME_TO_INSTRUCTION.put(name, instruction);
		return instruction;
	}

	private static TIInstruction instruction(String name, byte... bytecode) {
		return instruction(name, convertBytesToUnassignedInts(bytecode));
	}

	private static TIInstruction instruction(String name, int bytecode) {
		return instruction(name, List.of(bytecode));
	}

	/**
	 * Gets a {@link TIInstruction} by its bytecode.
	 *
	 * @param bytecode A bytecode array to look up its corresponding {@link TIInstruction}.
	 * @return A {@link TIInstruction} by its bytecode or null if no {@link TIInstruction} with the given bytecode exists.
	 */
	@Nullable
	public static TIInstruction by(List<Integer> bytecode) {
		return CODE_TO_INSTRUCTION.get(bytecode);
	}

	/**
	 * Gets a {@link TIInstruction} by its name.
	 *
	 * @param name A name to look up its corresponding {@link TIInstruction}.
	 * @return A {@link TIInstruction} by its name or null if no {@link TIInstruction} with the given name exists.
	 */
	@Nullable
	public static TIInstruction by(String name) {
		return NAME_TO_INSTRUCTION.get(name);
	}

	/**
	 * Converts an array of bytes into a list of unsigned integers.
	 *
	 * @param bytes An array of bytes to use.
	 * @return A list of unsigned integers for the given bytes.
	 */
	public static List<Integer> convertBytesToUnassignedInts(byte[] bytes) {
		int length = bytes.length;
		List<Integer> ints = new ArrayList<>(length);
		for (byte aByte : bytes) {
			ints.add(Byte.toUnsignedInt(aByte));
		}
		return ints;
	}
}
